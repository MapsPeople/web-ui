/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SortOrder } from "./enums/sort-order.enum";
import { UnitSystem } from "./enums/unit-system.enum";
import { Location } from "@mapsindoors/typescript-interfaces";
import { LocationBookingDuration } from "./enums/location-booking-duration.enum";
import { NotificationPosition } from "./enums/notification-position.enum";
import { NotificationMessage } from "./types/notification-message.interface";
import { NotificationType } from "./enums/notification-type.enum";
import { Route } from "./types/route.interface";
import { RouteTravelMode } from "./enums/route-travel-mode.enum";
import { DirectionsTranslations } from "./types/directions-translations.interface";
export namespace Components {
    interface ComboBoxItem {
        "selected": boolean;
        "text": string;
        "value": string;
    }
    interface MiCard {
    }
    interface MiChip {
        /**
          * Checks if the chip is active and applies different styling to the component.
          * @type {boolean}
         */
        "active": boolean;
        /**
          * The background color of the chip. The default #005655 HEX value refers to the --brand-colors-dark-pine-100 from MIDT
          * @type {string}
         */
        "backgroundColor"?: string;
        /**
          * The chip content that is displayed in the component.
          * @type {string}
         */
        "content": string;
        /**
          * The icon source.
          * @type {string}
         */
        "icon"?: string;
    }
    interface MiColumn {
        /**
          * The alignContent property sets the alignment of the column's content.
          * @type {('left'|'center'|'right')}
          * @default 'left'
          * @example <mi-column align-content="center"></mi-column>
          * @memberof Column
         */
        "alignContent": string;
        /**
          * The name of the property on the row object which value will be displayed.
          * @type {string}
          * @memberof Column
         */
        "binding": string;
        /**
          * If present, the column width is fitted the content.
          * @type {boolean}
          * @memberof Column
         */
        "fitContent": boolean;
        /**
          * The label that will be shown in the table header.
          * @type {string}
          * @memberof Column
         */
        "label": string;
        /**
          * The monospace property sets the font-family to monospace.
          * @type {boolean}
          * @memberof Column
         */
        "monospace": boolean;
        /**
          * If present, the table will be pre-sorted by this column.
          * @type {('asc'|'desc')}
          * @memberof Column
         */
        "sort": string;
        /**
          * If present, the column will be sortable. *For sorting dates use `sortable="date"`.
          * @type {(''|'date'|'default')}
          * @memberof Column
         */
        "sortable": string;
        /**
          * The width property sets the column's width. All CSS length units are accepted.
          * @example <mi-column width="100px"></mi-column>
          * @type {string}
          * @default 'auto'
          * @memberof Column
         */
        "width": string;
    }
    interface MiComboBox {
        /**
          * Sets the disabled state for the dropdown.
         */
        "disabled": boolean;
        /**
          * This attribute indicates that the items can be filtered using the input field present at the top. If it is not specified, the input field will not be visible, and filtering is not possible.
          * @type {boolean}
         */
        "filterable": boolean;
        /**
          * Gets or sets the list items.
          * @type {Array<HTMLMiDropdownItemElement>}
          * @returns
         */
        "items": Array<HTMLMiDropdownItemElement>;
        /**
          * Sort order of items.
          * @type {SortOrder}
         */
        "itemsOrder": SortOrder;
        /**
          * Guiding message when presented with a content window that has no rows. Default language is English.
         */
        "noResultsMessage": string;
        /**
          * Gets or sets the state of the dropdown. If the attribute is set to true then the dropdown will be expanded.
          * @type {boolean}
         */
        "open": boolean;
        /**
          * Gets the selected items.
          * @type {Array<HTMLMiDropdownItemElement>}
         */
        "selected": Array<HTMLMiDropdownItemElement>;
    }
    interface MiDataTable {
        /**
          * Guiding message when presented with a table that has no rows.
         */
        "emptyPageHeader": string;
        /**
          * Guiding message for actionable steps to be performed in order to render new search results.
         */
        "emptyPageSubheader": string;
        /**
          * Whether or not the table header should be sticky.
         */
        "isHeaderSticky": boolean;
        /**
          * The maximum number of rows to be displayed.
         */
        "maxRows": number;
        /**
          * Array of objects for each row in the table.
         */
        "rows": Array<any>;
        /**
          * The selectable attribute specifies whether the first column in the table should be checkboxes. The header will be a select all or none checkbox.
         */
        "selectable": boolean;
        /**
          * The selected property contains a Set of all selected rows. This property is only relevant if the selectable attribute is present.
         */
        "selected": Set<any>;
    }
    interface MiDistance {
        /**
          * Distance in meters.
          * @type {number}
         */
        "meters": number;
        /**
          * Set imperial or metric as default unit system. Default is Metric unless the browser is running US English. In that case Imperial.
          * @type {UnitSystem}
         */
        "unit": UnitSystem;
    }
    interface MiDropdown {
        /**
          * Sets the disabled state for the dropdown.
         */
        "disabled": boolean;
        /**
          * This attribute indicates that the items can be filtered using the input field present at the top. If it is not specified, the input field will not be visible, and filtering is not possible.
          * @type {boolean}
         */
        "filterable": boolean;
        /**
          * Sets the alternative text for the icon.
         */
        "iconAlt": string;
        /**
          * Sets the icon on the left-hand side of the component.
         */
        "iconSrc": string;
        /**
          * Gets or sets the list items.
          * @type {Array<HTMLMiDropdownItemElement>}
         */
        "items": Array<HTMLMiDropdownItemElement>;
        /**
          * Sort order of items.
          * @type {SortOrder}
         */
        "itemsOrder": SortOrder;
        /**
          * The label will be displayed in as the text of the dropdown if the attribute multiple is present. Only required if multiple is present.
          * @type {string}
         */
        "label": string;
        /**
          * This attribute indicates that multiple items can be selected in the list. If it is not specified, then only one item can be selected at a time.
          * @type {boolean}
         */
        "multiple": boolean;
        /**
          * Guiding message when presented with a content window that has no rows. Default language is English.
         */
        "noResultsMessage": string;
        /**
          * Gets or sets the state of the dropdown. If the attribute is set to true then the dropdown will be expanded.
          * @type {boolean}
         */
        "open": boolean;
        /**
          * Gets the selected items
          * @type {Array<HTMLMiDropdownItemElement>}
         */
        "selected": Array<HTMLMiDropdownItemElement>;
    }
    interface MiDropdownItem {
        "selected": boolean;
        "text": string;
        "value": string;
    }
    interface MiFloorSelector {
        /**
          * MapsIndoors instance.
         */
        "mapsindoors": any;
        /**
          * The color to use as the primary color (as background color of the selected floor in the list).
          * @type {string}
         */
        "primaryColor"?: string;
    }
    interface MiIcon {
        /**
          * The icon name. A list of supported icons can be found in the documentation.
          * @type {string}
         */
        "iconName": string;
    }
    interface MiKeyboard {
        /**
          * The active input element.
          * @type {HTMLInputElement}
         */
        "inputElement": HTMLInputElement;
        /**
          * The keyboard layout to use. Defaults to alphabetic.
          * @type {KeyboardLayout}
         */
        "layout": string;
    }
    interface MiList {
        /**
          * @description Determines if the MI Scroll Buttons Component should be rendered.
          * @type {boolean}
         */
        "scrollButtonsEnabled": boolean;
        /**
          * @description Determines how far to scroll when clicking one of the buttons from the MI Scroll Buttons Component.
          * @type {number}
         */
        "scrollLength": number;
    }
    interface MiListItemCategory {
        /**
          * @description Array of Categories.
          * @type {Array<Category>}
         */
        "category": any;
        /**
          * @description List orientation. Accepts the following values: 'vertical' and 'horizontal'.
          * @type {string}
         */
        "orientation": string;
    }
    interface MiListItemLocation {
        /**
          * @description Optional URL to icon to render for the Location. If not set, imageURL on the Location data will be used.
          * @type {string}
         */
        "icon": string;
        /**
          * @description Add a badge to the location icon of the type given as value.
          * @type {string}
         */
        "iconBadge": string;
        /**
          * @description The value of the badge.
          * @type {string} For availability, use "true" or "false".
         */
        "iconBadgeValue": string;
        /**
          * @description Location object.
         */
        "location": any;
        /**
          * Whether to show the External ID.
         */
        "showExternalId": boolean;
        /**
          * @description Set imperial or metric as unit for distance.
          * @type {UnitSystem}
         */
        "unit": UnitSystem;
    }
    interface MiLocationBooking {
        /**
          * The title of the created bookings. Defaults to "Booked".
          * @type {string}
         */
        "bookingTitle": string;
        /**
          * Wether booking should be performed for 30 or 60 minutes.
          * @type {LocationBookingDuration}
         */
        "duration": LocationBookingDuration;
        /**
          * MapsIndoors location to book.
          * @type {Location} MapsIndoors location
         */
        "location": Location;
        /**
          * How many time slots to show going forward in time. Default to 4.
         */
        "show": number;
        /**
          * No bookings will be allowed before this hour. Default value is 8.
          * @type {number} - the hour in 24h format
         */
        "startHour": number;
        /**
          * No bookings will be allowed within and after this hour. Default value is 18.
          * @type {number} - the hour (0-23)
         */
        "stopHour": number;
        /**
          * Translations object for translatable strings.
         */
        "translations": {
        book: string;
        cancel: string;
        booked: string;
    };
    }
    interface MiLocationInfo {
        /**
          * @description The word used for "Level" when showing level info. Default is "Level".
         */
        "level": string;
        /**
          * @description Location object.
         */
        "location": any;
        /**
          * @description Whether to show the External ID.
         */
        "showExternalId": boolean;
    }
    interface MiMapGooglemaps {
        /**
          * Clear existing MapsIndoors location highlight.
          * @returns
         */
        "clearHighlightLocation": () => Promise<void>;
        /**
          * Set to true to prevent external links on the map from opening. This can be useful when running the map on a kiosk where you never want the browser to navigate away.
          * @type {boolean}
         */
        "disableExternalLinks": boolean;
        /**
          * Set or get the current floor index shown on the map.
          * @type {string}
         */
        "floorIndex": string;
        /**
          * Render the floor selector as a Map Control at the given position.
          * @type {string}
         */
        "floorSelectorControlPosition": string;
        /**
          * Get the MapsIndoors Directions Renderer Instance.
          * @returns
         */
        "getDirectionsRendererInstance": () => Promise<any>;
        /**
          * Get the MapsIndoors Directions Service Instance.
          * @returns
         */
        "getDirectionsServiceInstance": () => Promise<any>;
        /**
          * Get the map instance.
          * @returns
         */
        "getMapInstance": () => Promise<any>;
        /**
          * Get the MapsIndoors instance.
          * @returns
         */
        "getMapsIndoorsInstance": () => Promise<any>;
        /**
          * The Google Maps API key.
          * @type {string}
         */
        "gmApiKey": string;
        /**
          * Google Maps options. Defaults to zoom: 17, maxZoom: 21, center: { lat: 0, lng: 0 }, mapTypeControl: false, streetViewControl: false. https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
          * @type {google.maps.MapOptions}
         */
        "gmOptions": google.maps.MapOptions;
        /**
          * Highlight a MapsIndoors location. Only a single location can be highlighted at the time.
          * @param location
          * @returns
         */
        "highlightLocation": (location: Location) => Promise<void>;
        /**
          * Set the component language. Default set to English (en). Will not react to changes.
         */
        "language": string;
        /**
          * The MapsIndoors API key.
          * @type {string}
         */
        "miApiKey": string;
        /**
          * Render the My Position Control as a Map Control at the given position.
          * @type {string}
         */
        "myPositionControlPosition": string;
        /**
          * Styling of polygon highlight when a location is clicked. Set it to null to turn off highlighting.
          * @type {object}
         */
        "polygonHighlightOptions": { strokeColor: string; strokeOpacity: number; strokeWeight: number; fillColor: string; fillOpacity: number; };
        /**
          * Styling of how the polyline looks when getting a route. Color: The stroke color of direction polyline on the map. Accepts any legal HTML color value. Default: '#307ad9'. Opacity: The stroke opacity of directions polylines on the map. Numerical value between 0.0 and 1.0. Default: 1. Weight: The width of the direction polyline in pixels. Default: 4.
          * @type {{ color: string, weight: number, opacity: number }}
         */
        "polylineOptions": { color: string, weight: number, opacity: number };
    }
    interface MiMapMapbox {
        /**
          * The MapBox access token.
          * @type {string}
         */
        "accessToken": string;
        /**
          * Set or get the bearing of the map.
          * @type {string}
         */
        "bearing": string;
        /**
          * Clear existing MapsIndoors location highlight.
          * @returns
         */
        "clearHighlightLocation": () => Promise<void>;
        /**
          * Set to true to prevent external links on the map from opening. This can be useful when running the map on a kiosk where you never want the browser to navigate away.
          * @type {boolean}
         */
        "disableExternalLinks": boolean;
        /**
          * Set or get the current floor index shown on the map.
          * @type {string}
         */
        "floorIndex": string;
        /**
          * Render the floor selector as a Map Control at the given position.
          * @type {('top-left' | 'top-right' | 'bottom-left' | 'bottom-right')}
         */
        "floorSelectorControlPosition": 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * Get the MapsIndoors Directions Renderer Instance.
          * @returns
         */
        "getDirectionsRendererInstance": () => Promise<any>;
        /**
          * Get the MapsIndoors Directions Service Instance.
          * @returns
         */
        "getDirectionsServiceInstance": () => Promise<any>;
        /**
          * Get the map instance.
          * @returns
         */
        "getMapInstance": () => Promise<any>;
        /**
          * Get the MapsIndoors instance.
          * @returns
         */
        "getMapsIndoorsInstance": () => Promise<any>;
        /**
          * Highlight a MapsIndoors location. Only a single location can be highlighted at the time.
          * @param location
          * @returns
         */
        "highlightLocation": (location: Location) => Promise<void>;
        /**
          * Set the component language. Default set to English (en). Will not react to changes.
         */
        "language": string;
        /**
          * Set or get the max pitch of the map (0-85).
          * @type {number}
         */
        "maxPitch": number;
        /**
          * Set or get the max zoom level of the map.
          * @type {string}
         */
        "maxZoom": string;
        /**
          * The MapsIndoors API key.
          * @type {string}
         */
        "miApiKey": string;
        /**
          * Render the My Position Control as a Map Control at the given position.
          * @type {('top-left' | 'top-right' | 'bottom-left' | 'bottom-right')}
         */
        "myPositionControlPosition": 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * Set or get the pitch (tilt) of the map. Measured in degrees (0-60).
          * @type {string}
         */
        "pitch": string;
        /**
          * Styling of polygon highlight when a location is clicked. Set it to null to turn off highlighting.
          * @type {object}
         */
        "polygonHighlightOptions": { strokeColor: string; strokeOpacity: number; strokeWeight: number; fillColor: string; fillOpacity: number; };
        /**
          * Styling of how the polyline looks when getting a route. Color: The stroke color of direction polyline on the map. Accepts any legal HTML color value. Default: '#307ad9'. Opacity: The stroke opacity of directions polylines on the map. Numerical value between 0.0 and 1.0. Default: 1. Weight: The width of the direction polyline in pixels. Default: 4.
          * @type {{ color: string, weight: number, opacity: number }}
         */
        "polylineOptions": { color: string, weight: number, opacity: number };
        /**
          * Set or get the current zoom level of the map.
          * @type {string}
         */
        "zoom": string;
    }
    interface MiMetricCard {
        /**
          * This can be used for displaying an error message if there are no data to be displayed.
          * @type {string}
          * @memberof MetricCard
         */
        "error": string;
        /**
          * This is the metric title.
          * @type {string}
          * @memberof MetricCard
         */
        "label": string;
        /**
          * When present a loading spinner will be displayed until the value or error attribute is set or the spinner attribute is removed
          * @type {boolean}
          * @memberof MetricCard
         */
        "spinner": boolean;
        /**
          * When present a info icon will be shown in the upper right corner of the card. When the mouse hovers over the icon tooltip will display the tip.
          * @type {string}
          * @memberof MetricCard
         */
        "tip": string;
        /**
          * This is the metric value.
          * @type {string}
          * @memberof MetricCard
         */
        "value": string;
    }
    interface MiMyPosition {
        /**
          * MapsIndoors instance.
         */
        "mapsindoors": any;
        /**
          * Reference: https://app.mapsindoors.com/mapsindoors/js/sdk/latest/docs/PositionControlOptions.html.
         */
        "myPositionOptions"?: any;
        /**
          * Method for requesting the current position, emitting events and showing position on map based on result.
          * @param selfInvoked - Used to track if call was invoked by clicking on position control or not.
         */
        "watchPosition": (selfInvoked?: boolean) => Promise<void>;
    }
    interface MiNotification {
        /**
          * Clear all notifications.
          * @returns
         */
        "clearAll": () => Promise<void>;
        /**
          * Time the notification should be visible. Default value is 3.
          * @type {number} - Duration in seconds.
         */
        "duration": number;
        /**
          * Where the notifications should be positioned.
          * @type {NotificationPosition}
         */
        "position": NotificationPosition;
        /**
          * Show a notification.
          * @param message - Message to display.
          * @param type - Type of notification. Available types: 'info', 'warning', 'success', 'error' and 'none'.
          * @param sticky - Set message as sticky to prevent it from disappearing.
          * @returns
         */
        "push": (message: string, type?: string, sticky?: boolean) => Promise<void>;
    }
    interface MiRouteInstructions {
        /**
          * Set active step to populate it with an "active" class. Defaults to legIndex 0 and stepIndex 0.
          * @type {{ legIndex: number, stepIndex: number }}
         */
        "activeStep": { legIndex: number, stepIndex: number };
        /**
          * If the end location is a MapsIndoors location, provide it to have the instructions present it. The destinationLocation attribute wins over the destinationName attribute.
          * @type {Location}
         */
        "destinationLocation": Location;
        /**
          * If the end location is a external location, provide a name to have the instructions present it. The destination name will not be rendered when the destinationLocation attribute is set.
          * @type {string}
         */
        "destinationName": string;
        /**
          * If indoor substeps/maneuvers should be hidden.
          * @type {boolean}
         */
        "hideIndoorSubsteps": boolean;
        /**
          * If the origin location is a MapsIndoors location, provide it to have the instructions present it. The originLocation attribute wins over the originName attribute.
          * @type {Location}
         */
        "originLocation": Location;
        /**
          * If the origin location is a external location, provide a name to have the instructions present it. The origin name will not be rendered when the originLocation attribute is set.
          * @type {string}
         */
        "originName": string;
        /**
          * A MapsIndoors directions result object given from a getRoute call from DirectionsService.
          * @type {Route}
         */
        "route": Route;
        /**
          * Translations object for translatable labels.
         */
        "translations": DirectionsTranslations;
        /**
          * Set preferred travel mode. Defaults to "walking".
          * @type {RouteTravelMode} 'walking', 'bicycling', 'transit', 'driving'.
         */
        "travelMode": RouteTravelMode;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit": UnitSystem;
    }
    interface MiRouteInstructionsHeading {
        /**
          * The destination location name.
          * @type {string}
         */
        "destinationName": string;
        /**
          * The origin location name.
          * @type {string}
         */
        "originName": string;
        /**
          * The total travel duration in seconds.
          * @type {number}
         */
        "totalTravelTime": number;
        /**
          * The total walking distance in meters.
          * @type {number}
         */
        "totalWalkingDistance": number;
        "translations": { from: string; to: string; avoidStairs: string; walk: string; walking: string; bike: string; bicycling: string; transit: string; car: string; driving: string; };
        /**
          * Set preferred travel mode. Defaults to "walking".
          * @type {RouteTravelMode} 'walking', 'bicycling', 'transit', 'driving'.
         */
        "travelMode": RouteTravelMode;
        /**
          * Set 'imperial' or 'metric' as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit": UnitSystem;
    }
    interface MiRouteInstructionsManeuver {
        /**
          * Maneuver to display given as stringified JSON.
          * @type {string} - Maneuver/substep object passed as stringified JSON.
         */
        "maneuver": string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations": string;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit": UnitSystem;
    }
    interface MiRouteInstructionsManeuverLegacy {
        /**
          * Maneuver to display given as stringified JSON.
          * @type {string} - Maneuver/substep object passed as stringified JSON.
         */
        "maneuver": string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations": string;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit": UnitSystem;
    }
    interface MiRouteInstructionsStep {
        /**
          * Programmatically close the substeps.
         */
        "closeSubsteps": () => Promise<void>;
        /**
          * The final step when the user has arrived to the destination location.
          * @type {string}
         */
        "destinationLocation"?: string;
        /**
          * The route context of previous step, if any.
          * @type {string}
         */
        "fromRouteContext": string;
        /**
          * The transit stop of previous step if any.
          * @type {string}
         */
        "fromTransitStop": string;
        /**
          * The travel mode of previous step, if any.
          * @type {string}
         */
        "fromTravelMode": string;
        /**
          * If indoor substeps/maneuvers should be hidden.
          * @type {boolean}
         */
        "hideIndoorSubsteps": boolean;
        /**
          * Programmatically open the substeps.
         */
        "openSubsteps": () => Promise<void>;
        /**
          * The step data object to render from. Must be passed as stringified JSON.
         */
        "step": string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations": string;
        /**
          * Set imperial or metric as default unit system. Default is Metric unless the browser is running US English. In that case Imperial.
          * @type {UnitSystem}
         */
        "unit": UnitSystem;
    }
    interface MiRouteInstructionsStepLegacy {
        /**
          * The route context of previous step, if any.
          * @type {string}
         */
        "fromRouteContext": string;
        /**
          * The transit stop of previous step if any.
          * @type {string}
         */
        "fromTransitStop": string;
        /**
          * The travel mode of previous step, if any.
          * @type {string}
         */
        "fromTravelMode": string;
        /**
          * If indoor substeps/maneuvers should be hidden.
          * @type {boolean}
         */
        "hideIndoorSubsteps": boolean;
        /**
          * The step data object to render from. Must be passed as stringified JSON.
         */
        "step": string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations": string;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit": UnitSystem;
    }
    interface MiScrollButtons {
        /**
          * Reference to the element with scroll on parent element.
          * @type {HTMLDivElement}
         */
        "scrollContainerElementRef": HTMLDivElement;
        /**
          * Determines how far to scroll when clicking one of the buttons. Default value is 100.
          * @type {number}
         */
        "scrollLength": number;
        /**
          * Updates enable/disable state for scroll up and down buttons.
          * @returns
         */
        "updateScrollButtonsState": () => Promise<void>;
    }
    interface MiSearch {
        /**
          * Clear the input field.
         */
        "clear": () => Promise<void>;
        /**
          * Data attributes for the input field.
         */
        "dataAttributes": { [key: string]: string };
        /**
          * Make the search field disabled
         */
        "disabled": boolean;
        /**
          * Set focus on the input field. The preventScroll boolean is passed as true to prevent the browser from scrolling the document to bring the newly-focused element into view.
         */
        "focusInput": () => Promise<void>;
        /**
          * Restrict Google Places search to a specific country (two-character, ISO 3166-1 Alpha-2 compatible country code)
         */
        "gmCountryCode": string;
        /**
          * If searching should include Google Places autocomplete suggestions.  Remember to comply to Google's policy by showing a "Power By Google" badge somewhere on your page if not already showing a Google map: https://developers.google.com/places/web-service/policies
         */
        "google": boolean;
        /**
          * Id for the input field.
         */
        "idAttribute": string;
        /**
          * If searching should include Mapbox autocomplete suggestions.
         */
        "mapbox": boolean;
        /**
          * If searching should include MapsIndoors locations.
         */
        "mapsindoors": boolean;
        /**
          * Search only Mapsindoors locations within given categories. Accepts comma separated list of categories, eg. 'toilet,office'
         */
        "miCategories": string;
        /**
          * Which fields on MapsIndoors locations to search in. Comma separated string.
         */
        "miFields": string;
        /**
          * Search for MapsIndoors locations near a point. Can either be lat,lng coordinate as a string, eg. '-12.3456,45.6789' or a string in the format "type:id" e.g. "venue:586ca9f1bc1f5702406442b6"
         */
        "miNear": string;
        /**
          * Specify Mapsindoors search ordering
         */
        "miOrder": string;
        /**
          * Tell Mapsindoors to skip a number of results. Combine with miTake for pagination purposes.
         */
        "miSkip": number;
        /**
          * Restrict how many Mapsindoors results to request.
         */
        "miTake": number;
        /**
          * Restrict search results to a speficic venue (id or name)
         */
        "miVenue": string;
        /**
          * Placeholder for the input field.
         */
        "placeholder": string;
        /**
          * The Mapbox Session Token used for getting Mapbox autocomplete suggestions.
         */
        "sessionToken": string;
        /**
          * Sets text to be shown in the search field. Setting it will not perform a search.
         */
        "setDisplayText": (displayText: string) => Promise<void>;
        /**
          * Programmatically trigger the search.
         */
        "triggerSearch": () => Promise<void>;
        /**
          * The user position which can determine the proximity for the Mapbox places results.
         */
        "userPosition": string;
        /**
          * Get or set the entered value
         */
        "value": string;
    }
    interface MiShareSms {
        /**
          * Default value for country code input field.
          * @type {string}
         */
        "countryCode": string;
        /**
          * MapsIndoors id for destination location.
          * @type {string}
         */
        "destinationLocationId": string;
        /**
          * MapsIndoors id for origin location.
          * @type {string}
         */
        "originLocationId": string;
        /**
          * Placeholder text for phone number input field.
          * @type {string}
         */
        "phoneNumberInputPlaceholder": string;
        /**
          * Label for submit button.
          * @type {string}
         */
        "submitButtonLabel": string;
        /**
          * MapsIndoors venue id.
          * @type {string}
         */
        "venueId": string;
    }
    interface MiSpinner {
        /**
          * The inverse attribute will inverse the color of the spinner.
          * @type {boolean}
         */
        "inverse": boolean;
    }
    interface MiStepSwitcher {
        /**
          * Heading to display.
          * @type {string}
         */
        "heading": string;
        /**
          * Step index to show. Defaults to first step.
          * @type {number}
         */
        "stepIndex": number;
        /**
          * Steps to display dots for.
          * @type {any[]}
         */
        "steps": any[];
    }
    interface MiTab {
        "label": string;
        "tabFor": string;
    }
    interface MiTabPanel {
        "active": (active?: boolean) => Promise<boolean>;
    }
    interface MiTabs {
        "active": number;
        /**
          * Sets a border surrounding the content view.
         */
        "bordered": boolean;
    }
    interface MiTime {
        /**
          * Time in seconds.
          * @type {string}
         */
        "seconds": number;
        /**
          * Object with translation strings as stringified JSON. Default translations {days: 'd', hours: 'h', minutes: 'min'}.
         */
        "translations": string;
    }
}
export interface MiColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiColumnElement;
}
export interface MiComboBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiComboBoxElement;
}
export interface MiDataTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiDataTableElement;
}
export interface MiDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiDropdownElement;
}
export interface MiListItemCategoryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiListItemCategoryElement;
}
export interface MiListItemLocationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiListItemLocationElement;
}
export interface MiLocationBookingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiLocationBookingElement;
}
export interface MiMapGooglemapsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiMapGooglemapsElement;
}
export interface MiMapMapboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiMapMapboxElement;
}
export interface MiMyPositionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiMyPositionElement;
}
export interface MiRouteInstructionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiRouteInstructionsElement;
}
export interface MiRouteInstructionsStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiRouteInstructionsStepElement;
}
export interface MiRouteInstructionsStepLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiRouteInstructionsStepLegacyElement;
}
export interface MiSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiSearchElement;
}
export interface MiShareSmsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiShareSmsElement;
}
export interface MiStepSwitcherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMiStepSwitcherElement;
}
declare global {
    interface HTMLComboBoxItemElement extends Components.ComboBoxItem, HTMLStencilElement {
    }
    var HTMLComboBoxItemElement: {
        prototype: HTMLComboBoxItemElement;
        new (): HTMLComboBoxItemElement;
    };
    interface HTMLMiCardElement extends Components.MiCard, HTMLStencilElement {
    }
    var HTMLMiCardElement: {
        prototype: HTMLMiCardElement;
        new (): HTMLMiCardElement;
    };
    interface HTMLMiChipElement extends Components.MiChip, HTMLStencilElement {
    }
    var HTMLMiChipElement: {
        prototype: HTMLMiChipElement;
        new (): HTMLMiChipElement;
    };
    interface HTMLMiColumnElement extends Components.MiColumn, HTMLStencilElement {
    }
    var HTMLMiColumnElement: {
        prototype: HTMLMiColumnElement;
        new (): HTMLMiColumnElement;
    };
    interface HTMLMiComboBoxElement extends Components.MiComboBox, HTMLStencilElement {
    }
    var HTMLMiComboBoxElement: {
        prototype: HTMLMiComboBoxElement;
        new (): HTMLMiComboBoxElement;
    };
    interface HTMLMiDataTableElement extends Components.MiDataTable, HTMLStencilElement {
    }
    var HTMLMiDataTableElement: {
        prototype: HTMLMiDataTableElement;
        new (): HTMLMiDataTableElement;
    };
    interface HTMLMiDistanceElement extends Components.MiDistance, HTMLStencilElement {
    }
    var HTMLMiDistanceElement: {
        prototype: HTMLMiDistanceElement;
        new (): HTMLMiDistanceElement;
    };
    interface HTMLMiDropdownElement extends Components.MiDropdown, HTMLStencilElement {
    }
    var HTMLMiDropdownElement: {
        prototype: HTMLMiDropdownElement;
        new (): HTMLMiDropdownElement;
    };
    interface HTMLMiDropdownItemElement extends Components.MiDropdownItem, HTMLStencilElement {
    }
    var HTMLMiDropdownItemElement: {
        prototype: HTMLMiDropdownItemElement;
        new (): HTMLMiDropdownItemElement;
    };
    interface HTMLMiFloorSelectorElement extends Components.MiFloorSelector, HTMLStencilElement {
    }
    var HTMLMiFloorSelectorElement: {
        prototype: HTMLMiFloorSelectorElement;
        new (): HTMLMiFloorSelectorElement;
    };
    interface HTMLMiIconElement extends Components.MiIcon, HTMLStencilElement {
    }
    var HTMLMiIconElement: {
        prototype: HTMLMiIconElement;
        new (): HTMLMiIconElement;
    };
    interface HTMLMiKeyboardElement extends Components.MiKeyboard, HTMLStencilElement {
    }
    var HTMLMiKeyboardElement: {
        prototype: HTMLMiKeyboardElement;
        new (): HTMLMiKeyboardElement;
    };
    interface HTMLMiListElement extends Components.MiList, HTMLStencilElement {
    }
    var HTMLMiListElement: {
        prototype: HTMLMiListElement;
        new (): HTMLMiListElement;
    };
    interface HTMLMiListItemCategoryElement extends Components.MiListItemCategory, HTMLStencilElement {
    }
    var HTMLMiListItemCategoryElement: {
        prototype: HTMLMiListItemCategoryElement;
        new (): HTMLMiListItemCategoryElement;
    };
    interface HTMLMiListItemLocationElement extends Components.MiListItemLocation, HTMLStencilElement {
    }
    var HTMLMiListItemLocationElement: {
        prototype: HTMLMiListItemLocationElement;
        new (): HTMLMiListItemLocationElement;
    };
    interface HTMLMiLocationBookingElement extends Components.MiLocationBooking, HTMLStencilElement {
    }
    var HTMLMiLocationBookingElement: {
        prototype: HTMLMiLocationBookingElement;
        new (): HTMLMiLocationBookingElement;
    };
    interface HTMLMiLocationInfoElement extends Components.MiLocationInfo, HTMLStencilElement {
    }
    var HTMLMiLocationInfoElement: {
        prototype: HTMLMiLocationInfoElement;
        new (): HTMLMiLocationInfoElement;
    };
    interface HTMLMiMapGooglemapsElement extends Components.MiMapGooglemaps, HTMLStencilElement {
    }
    var HTMLMiMapGooglemapsElement: {
        prototype: HTMLMiMapGooglemapsElement;
        new (): HTMLMiMapGooglemapsElement;
    };
    interface HTMLMiMapMapboxElement extends Components.MiMapMapbox, HTMLStencilElement {
    }
    var HTMLMiMapMapboxElement: {
        prototype: HTMLMiMapMapboxElement;
        new (): HTMLMiMapMapboxElement;
    };
    interface HTMLMiMetricCardElement extends Components.MiMetricCard, HTMLStencilElement {
    }
    var HTMLMiMetricCardElement: {
        prototype: HTMLMiMetricCardElement;
        new (): HTMLMiMetricCardElement;
    };
    interface HTMLMiMyPositionElement extends Components.MiMyPosition, HTMLStencilElement {
    }
    var HTMLMiMyPositionElement: {
        prototype: HTMLMiMyPositionElement;
        new (): HTMLMiMyPositionElement;
    };
    interface HTMLMiNotificationElement extends Components.MiNotification, HTMLStencilElement {
    }
    var HTMLMiNotificationElement: {
        prototype: HTMLMiNotificationElement;
        new (): HTMLMiNotificationElement;
    };
    interface HTMLMiRouteInstructionsElement extends Components.MiRouteInstructions, HTMLStencilElement {
    }
    var HTMLMiRouteInstructionsElement: {
        prototype: HTMLMiRouteInstructionsElement;
        new (): HTMLMiRouteInstructionsElement;
    };
    interface HTMLMiRouteInstructionsHeadingElement extends Components.MiRouteInstructionsHeading, HTMLStencilElement {
    }
    var HTMLMiRouteInstructionsHeadingElement: {
        prototype: HTMLMiRouteInstructionsHeadingElement;
        new (): HTMLMiRouteInstructionsHeadingElement;
    };
    interface HTMLMiRouteInstructionsManeuverElement extends Components.MiRouteInstructionsManeuver, HTMLStencilElement {
    }
    var HTMLMiRouteInstructionsManeuverElement: {
        prototype: HTMLMiRouteInstructionsManeuverElement;
        new (): HTMLMiRouteInstructionsManeuverElement;
    };
    interface HTMLMiRouteInstructionsManeuverLegacyElement extends Components.MiRouteInstructionsManeuverLegacy, HTMLStencilElement {
    }
    var HTMLMiRouteInstructionsManeuverLegacyElement: {
        prototype: HTMLMiRouteInstructionsManeuverLegacyElement;
        new (): HTMLMiRouteInstructionsManeuverLegacyElement;
    };
    interface HTMLMiRouteInstructionsStepElement extends Components.MiRouteInstructionsStep, HTMLStencilElement {
    }
    var HTMLMiRouteInstructionsStepElement: {
        prototype: HTMLMiRouteInstructionsStepElement;
        new (): HTMLMiRouteInstructionsStepElement;
    };
    interface HTMLMiRouteInstructionsStepLegacyElement extends Components.MiRouteInstructionsStepLegacy, HTMLStencilElement {
    }
    var HTMLMiRouteInstructionsStepLegacyElement: {
        prototype: HTMLMiRouteInstructionsStepLegacyElement;
        new (): HTMLMiRouteInstructionsStepLegacyElement;
    };
    interface HTMLMiScrollButtonsElement extends Components.MiScrollButtons, HTMLStencilElement {
    }
    var HTMLMiScrollButtonsElement: {
        prototype: HTMLMiScrollButtonsElement;
        new (): HTMLMiScrollButtonsElement;
    };
    interface HTMLMiSearchElement extends Components.MiSearch, HTMLStencilElement {
    }
    var HTMLMiSearchElement: {
        prototype: HTMLMiSearchElement;
        new (): HTMLMiSearchElement;
    };
    interface HTMLMiShareSmsElement extends Components.MiShareSms, HTMLStencilElement {
    }
    var HTMLMiShareSmsElement: {
        prototype: HTMLMiShareSmsElement;
        new (): HTMLMiShareSmsElement;
    };
    interface HTMLMiSpinnerElement extends Components.MiSpinner, HTMLStencilElement {
    }
    var HTMLMiSpinnerElement: {
        prototype: HTMLMiSpinnerElement;
        new (): HTMLMiSpinnerElement;
    };
    interface HTMLMiStepSwitcherElement extends Components.MiStepSwitcher, HTMLStencilElement {
    }
    var HTMLMiStepSwitcherElement: {
        prototype: HTMLMiStepSwitcherElement;
        new (): HTMLMiStepSwitcherElement;
    };
    interface HTMLMiTabElement extends Components.MiTab, HTMLStencilElement {
    }
    var HTMLMiTabElement: {
        prototype: HTMLMiTabElement;
        new (): HTMLMiTabElement;
    };
    interface HTMLMiTabPanelElement extends Components.MiTabPanel, HTMLStencilElement {
    }
    var HTMLMiTabPanelElement: {
        prototype: HTMLMiTabPanelElement;
        new (): HTMLMiTabPanelElement;
    };
    interface HTMLMiTabsElement extends Components.MiTabs, HTMLStencilElement {
    }
    var HTMLMiTabsElement: {
        prototype: HTMLMiTabsElement;
        new (): HTMLMiTabsElement;
    };
    interface HTMLMiTimeElement extends Components.MiTime, HTMLStencilElement {
    }
    var HTMLMiTimeElement: {
        prototype: HTMLMiTimeElement;
        new (): HTMLMiTimeElement;
    };
    interface HTMLElementTagNameMap {
        "combo-box-item": HTMLComboBoxItemElement;
        "mi-card": HTMLMiCardElement;
        "mi-chip": HTMLMiChipElement;
        "mi-column": HTMLMiColumnElement;
        "mi-combo-box": HTMLMiComboBoxElement;
        "mi-data-table": HTMLMiDataTableElement;
        "mi-distance": HTMLMiDistanceElement;
        "mi-dropdown": HTMLMiDropdownElement;
        "mi-dropdown-item": HTMLMiDropdownItemElement;
        "mi-floor-selector": HTMLMiFloorSelectorElement;
        "mi-icon": HTMLMiIconElement;
        "mi-keyboard": HTMLMiKeyboardElement;
        "mi-list": HTMLMiListElement;
        "mi-list-item-category": HTMLMiListItemCategoryElement;
        "mi-list-item-location": HTMLMiListItemLocationElement;
        "mi-location-booking": HTMLMiLocationBookingElement;
        "mi-location-info": HTMLMiLocationInfoElement;
        "mi-map-googlemaps": HTMLMiMapGooglemapsElement;
        "mi-map-mapbox": HTMLMiMapMapboxElement;
        "mi-metric-card": HTMLMiMetricCardElement;
        "mi-my-position": HTMLMiMyPositionElement;
        "mi-notification": HTMLMiNotificationElement;
        "mi-route-instructions": HTMLMiRouteInstructionsElement;
        "mi-route-instructions-heading": HTMLMiRouteInstructionsHeadingElement;
        "mi-route-instructions-maneuver": HTMLMiRouteInstructionsManeuverElement;
        "mi-route-instructions-maneuver-legacy": HTMLMiRouteInstructionsManeuverLegacyElement;
        "mi-route-instructions-step": HTMLMiRouteInstructionsStepElement;
        "mi-route-instructions-step-legacy": HTMLMiRouteInstructionsStepLegacyElement;
        "mi-scroll-buttons": HTMLMiScrollButtonsElement;
        "mi-search": HTMLMiSearchElement;
        "mi-share-sms": HTMLMiShareSmsElement;
        "mi-spinner": HTMLMiSpinnerElement;
        "mi-step-switcher": HTMLMiStepSwitcherElement;
        "mi-tab": HTMLMiTabElement;
        "mi-tab-panel": HTMLMiTabPanelElement;
        "mi-tabs": HTMLMiTabsElement;
        "mi-time": HTMLMiTimeElement;
    }
}
declare namespace LocalJSX {
    interface ComboBoxItem {
        "selected"?: boolean;
        "text"?: string;
        "value"?: string;
    }
    interface MiCard {
    }
    interface MiChip {
        /**
          * Checks if the chip is active and applies different styling to the component.
          * @type {boolean}
         */
        "active"?: boolean;
        /**
          * The background color of the chip. The default #005655 HEX value refers to the --brand-colors-dark-pine-100 from MIDT
          * @type {string}
         */
        "backgroundColor"?: string;
        /**
          * The chip content that is displayed in the component.
          * @type {string}
         */
        "content"?: string;
        /**
          * The icon source.
          * @type {string}
         */
        "icon"?: string;
    }
    interface MiColumn {
        /**
          * The alignContent property sets the alignment of the column's content.
          * @type {('left'|'center'|'right')}
          * @default 'left'
          * @example <mi-column align-content="center"></mi-column>
          * @memberof Column
         */
        "alignContent"?: string;
        /**
          * The name of the property on the row object which value will be displayed.
          * @type {string}
          * @memberof Column
         */
        "binding"?: string;
        /**
          * If present, the column width is fitted the content.
          * @type {boolean}
          * @memberof Column
         */
        "fitContent"?: boolean;
        /**
          * The label that will be shown in the table header.
          * @type {string}
          * @memberof Column
         */
        "label"?: string;
        /**
          * The monospace property sets the font-family to monospace.
          * @type {boolean}
          * @memberof Column
         */
        "monospace"?: boolean;
        /**
          * Fired when clicking on content within a table cell for this column. Event detail contains the row data.
          * @event clicked
          * @type {EventEmitter}
         */
        "onClicked"?: (event: MiColumnCustomEvent<object>) => void;
        /**
          * If present, the table will be pre-sorted by this column.
          * @type {('asc'|'desc')}
          * @memberof Column
         */
        "sort"?: string;
        /**
          * If present, the column will be sortable. *For sorting dates use `sortable="date"`.
          * @type {(''|'date'|'default')}
          * @memberof Column
         */
        "sortable"?: string;
        /**
          * The width property sets the column's width. All CSS length units are accepted.
          * @example <mi-column width="100px"></mi-column>
          * @type {string}
          * @default 'auto'
          * @memberof Column
         */
        "width"?: string;
    }
    interface MiComboBox {
        /**
          * Sets the disabled state for the dropdown.
         */
        "disabled"?: boolean;
        /**
          * This attribute indicates that the items can be filtered using the input field present at the top. If it is not specified, the input field will not be visible, and filtering is not possible.
          * @type {boolean}
         */
        "filterable"?: boolean;
        /**
          * Gets or sets the list items.
          * @type {Array<HTMLMiDropdownItemElement>}
          * @returns
         */
        "items"?: Array<HTMLMiDropdownItemElement>;
        /**
          * Sort order of items.
          * @type {SortOrder}
         */
        "itemsOrder"?: SortOrder;
        /**
          * Guiding message when presented with a content window that has no rows. Default language is English.
         */
        "noResultsMessage"?: string;
        /**
          * Triggers an event when the selection is changed.
          * @type {EventEmitter}
         */
        "onChange"?: (event: MiComboBoxCustomEvent<any>) => void;
        /**
          * Gets or sets the state of the dropdown. If the attribute is set to true then the dropdown will be expanded.
          * @type {boolean}
         */
        "open"?: boolean;
        /**
          * Gets the selected items.
          * @type {Array<HTMLMiDropdownItemElement>}
         */
        "selected"?: Array<HTMLMiDropdownItemElement>;
    }
    interface MiDataTable {
        /**
          * Guiding message when presented with a table that has no rows.
         */
        "emptyPageHeader"?: string;
        /**
          * Guiding message for actionable steps to be performed in order to render new search results.
         */
        "emptyPageSubheader"?: string;
        /**
          * Whether or not the table header should be sticky.
         */
        "isHeaderSticky"?: boolean;
        /**
          * The maximum number of rows to be displayed.
         */
        "maxRows"?: number;
        /**
          * Fired when selection of rows is changed. Event detail contains all the selected rows. This event is only relevant if the selectable attribute is present.
          * @event selectionChanged
         */
        "onSelectionChanged"?: (event: MiDataTableCustomEvent<object>) => void;
        /**
          * Array of objects for each row in the table.
         */
        "rows"?: Array<any>;
        /**
          * The selectable attribute specifies whether the first column in the table should be checkboxes. The header will be a select all or none checkbox.
         */
        "selectable"?: boolean;
        /**
          * The selected property contains a Set of all selected rows. This property is only relevant if the selectable attribute is present.
         */
        "selected"?: Set<any>;
    }
    interface MiDistance {
        /**
          * Distance in meters.
          * @type {number}
         */
        "meters"?: number;
        /**
          * Set imperial or metric as default unit system. Default is Metric unless the browser is running US English. In that case Imperial.
          * @type {UnitSystem}
         */
        "unit"?: UnitSystem;
    }
    interface MiDropdown {
        /**
          * Sets the disabled state for the dropdown.
         */
        "disabled"?: boolean;
        /**
          * This attribute indicates that the items can be filtered using the input field present at the top. If it is not specified, the input field will not be visible, and filtering is not possible.
          * @type {boolean}
         */
        "filterable"?: boolean;
        /**
          * Sets the alternative text for the icon.
         */
        "iconAlt"?: string;
        /**
          * Sets the icon on the left-hand side of the component.
         */
        "iconSrc"?: string;
        /**
          * Gets or sets the list items.
          * @type {Array<HTMLMiDropdownItemElement>}
         */
        "items"?: Array<HTMLMiDropdownItemElement>;
        /**
          * Sort order of items.
          * @type {SortOrder}
         */
        "itemsOrder"?: SortOrder;
        /**
          * The label will be displayed in as the text of the dropdown if the attribute multiple is present. Only required if multiple is present.
          * @type {string}
         */
        "label": string;
        /**
          * This attribute indicates that multiple items can be selected in the list. If it is not specified, then only one item can be selected at a time.
          * @type {boolean}
         */
        "multiple"?: boolean;
        /**
          * Guiding message when presented with a content window that has no rows. Default language is English.
         */
        "noResultsMessage"?: string;
        /**
          * Triggers an event when the selection is changed.
          * @type {EventEmitter}
         */
        "onChange"?: (event: MiDropdownCustomEvent<any>) => void;
        /**
          * Gets or sets the state of the dropdown. If the attribute is set to true then the dropdown will be expanded.
          * @type {boolean}
         */
        "open"?: boolean;
        /**
          * Gets the selected items
          * @type {Array<HTMLMiDropdownItemElement>}
         */
        "selected"?: Array<HTMLMiDropdownItemElement>;
    }
    interface MiDropdownItem {
        "selected"?: boolean;
        "text"?: string;
        "value"?: string;
    }
    interface MiFloorSelector {
        /**
          * MapsIndoors instance.
         */
        "mapsindoors"?: any;
        /**
          * The color to use as the primary color (as background color of the selected floor in the list).
          * @type {string}
         */
        "primaryColor"?: string;
    }
    interface MiIcon {
        /**
          * The icon name. A list of supported icons can be found in the documentation.
          * @type {string}
         */
        "iconName"?: string;
    }
    interface MiKeyboard {
        /**
          * The active input element.
          * @type {HTMLInputElement}
         */
        "inputElement"?: HTMLInputElement;
        /**
          * The keyboard layout to use. Defaults to alphabetic.
          * @type {KeyboardLayout}
         */
        "layout"?: string;
    }
    interface MiList {
        /**
          * @description Determines if the MI Scroll Buttons Component should be rendered.
          * @type {boolean}
         */
        "scrollButtonsEnabled"?: boolean;
        /**
          * @description Determines how far to scroll when clicking one of the buttons from the MI Scroll Buttons Component.
          * @type {number}
         */
        "scrollLength"?: number;
    }
    interface MiListItemCategory {
        /**
          * @description Array of Categories.
          * @type {Array<Category>}
         */
        "category"?: any;
        /**
          * @description Emits the clicked category.
          * @type {EventEmitter<Category>}
         */
        "onCategoryClicked"?: (event: MiListItemCategoryCustomEvent<any>) => void;
        /**
          * @description Emits a component render event.
          * @type {EventEmitter}
         */
        "onListItemDidRender"?: (event: MiListItemCategoryCustomEvent<any>) => void;
        /**
          * @description List orientation. Accepts the following values: 'vertical' and 'horizontal'.
          * @type {string}
         */
        "orientation"?: string;
    }
    interface MiListItemLocation {
        /**
          * @description Optional URL to icon to render for the Location. If not set, imageURL on the Location data will be used.
          * @type {string}
         */
        "icon"?: string;
        /**
          * @description Add a badge to the location icon of the type given as value.
          * @type {string}
         */
        "iconBadge"?: string;
        /**
          * @description The value of the badge.
          * @type {string} For availability, use "true" or "false".
         */
        "iconBadgeValue"?: string;
        /**
          * @description Location object.
         */
        "location"?: any;
        /**
          * @description Emits a component render event.
          * @type {EventEmitter}
         */
        "onListItemDidRender"?: (event: MiListItemLocationCustomEvent<any>) => void;
        /**
          * @description Emits the clicked MI Location.
          * @type {EventEmitter<Location>}
         */
        "onLocationClicked"?: (event: MiListItemLocationCustomEvent<any>) => void;
        /**
          * Whether to show the External ID.
         */
        "showExternalId"?: boolean;
        /**
          * @description Set imperial or metric as unit for distance.
          * @type {UnitSystem}
         */
        "unit"?: UnitSystem;
    }
    interface MiLocationBooking {
        /**
          * The title of the created bookings. Defaults to "Booked".
          * @type {string}
         */
        "bookingTitle"?: string;
        /**
          * Wether booking should be performed for 30 or 60 minutes.
          * @type {LocationBookingDuration}
         */
        "duration"?: LocationBookingDuration;
        /**
          * MapsIndoors location to book.
          * @type {Location} MapsIndoors location
         */
        "location"?: Location;
        /**
          * Event fired when booking is completed.
          * @event bookingCompleted
          * @type {EventEmitter}
         */
        "onBookingCompleted"?: (event: MiLocationBookingCustomEvent<object>) => void;
        /**
          * Event fired in case booking failed.
          * @event bookingFailed
          * @type {EventEmitter}
         */
        "onBookingFailed"?: (event: MiLocationBookingCustomEvent<Error>) => void;
        /**
          * Event fired when booking is cancelled.
          * @type {EventEmitter}
         */
        "onCancelCompleted"?: (event: MiLocationBookingCustomEvent<void>) => void;
        /**
          * Event fired in case cancelling failed.
          * @type {EventEmitter}
         */
        "onCancelFailed"?: (event: MiLocationBookingCustomEvent<Error>) => void;
        /**
          * How many time slots to show going forward in time. Default to 4.
         */
        "show"?: number;
        /**
          * No bookings will be allowed before this hour. Default value is 8.
          * @type {number} - the hour in 24h format
         */
        "startHour"?: number;
        /**
          * No bookings will be allowed within and after this hour. Default value is 18.
          * @type {number} - the hour (0-23)
         */
        "stopHour"?: number;
        /**
          * Translations object for translatable strings.
         */
        "translations"?: {
        book: string;
        cancel: string;
        booked: string;
    };
    }
    interface MiLocationInfo {
        /**
          * @description The word used for "Level" when showing level info. Default is "Level".
         */
        "level"?: string;
        /**
          * @description Location object.
         */
        "location"?: any;
        /**
          * @description Whether to show the External ID.
         */
        "showExternalId"?: boolean;
    }
    interface MiMapGooglemaps {
        /**
          * Set to true to prevent external links on the map from opening. This can be useful when running the map on a kiosk where you never want the browser to navigate away.
          * @type {boolean}
         */
        "disableExternalLinks"?: boolean;
        /**
          * Set or get the current floor index shown on the map.
          * @type {string}
         */
        "floorIndex"?: string;
        /**
          * Render the floor selector as a Map Control at the given position.
          * @type {string}
         */
        "floorSelectorControlPosition"?: string;
        /**
          * The Google Maps API key.
          * @type {string}
         */
        "gmApiKey"?: string;
        /**
          * Google Maps options. Defaults to zoom: 17, maxZoom: 21, center: { lat: 0, lng: 0 }, mapTypeControl: false, streetViewControl: false. https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions
          * @type {google.maps.MapOptions}
         */
        "gmOptions"?: google.maps.MapOptions;
        /**
          * Set the component language. Default set to English (en). Will not react to changes.
         */
        "language"?: string;
        /**
          * The MapsIndoors API key.
          * @type {string}
         */
        "miApiKey"?: string;
        /**
          * Render the My Position Control as a Map Control at the given position.
          * @type {string}
         */
        "myPositionControlPosition"?: string;
        /**
          * Ready event emitted when the MapsIndoors has been initialized and is ready.
          * @event ready
          * @type {EventEmitter}
         */
        "onMapsIndoorsReady"?: (event: MiMapGooglemapsCustomEvent<any>) => void;
        /**
          * Styling of polygon highlight when a location is clicked. Set it to null to turn off highlighting.
          * @type {object}
         */
        "polygonHighlightOptions"?: { strokeColor: string; strokeOpacity: number; strokeWeight: number; fillColor: string; fillOpacity: number; };
        /**
          * Styling of how the polyline looks when getting a route. Color: The stroke color of direction polyline on the map. Accepts any legal HTML color value. Default: '#307ad9'. Opacity: The stroke opacity of directions polylines on the map. Numerical value between 0.0 and 1.0. Default: 1. Weight: The width of the direction polyline in pixels. Default: 4.
          * @type {{ color: string, weight: number, opacity: number }}
         */
        "polylineOptions"?: { color: string, weight: number, opacity: number };
    }
    interface MiMapMapbox {
        /**
          * The MapBox access token.
          * @type {string}
         */
        "accessToken"?: string;
        /**
          * Set or get the bearing of the map.
          * @type {string}
         */
        "bearing"?: string;
        /**
          * Set to true to prevent external links on the map from opening. This can be useful when running the map on a kiosk where you never want the browser to navigate away.
          * @type {boolean}
         */
        "disableExternalLinks"?: boolean;
        /**
          * Set or get the current floor index shown on the map.
          * @type {string}
         */
        "floorIndex"?: string;
        /**
          * Render the floor selector as a Map Control at the given position.
          * @type {('top-left' | 'top-right' | 'bottom-left' | 'bottom-right')}
         */
        "floorSelectorControlPosition"?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * Set the component language. Default set to English (en). Will not react to changes.
         */
        "language"?: string;
        /**
          * Set or get the max pitch of the map (0-85).
          * @type {number}
         */
        "maxPitch"?: number;
        /**
          * Set or get the max zoom level of the map.
          * @type {string}
         */
        "maxZoom"?: string;
        /**
          * The MapsIndoors API key.
          * @type {string}
         */
        "miApiKey"?: string;
        /**
          * Render the My Position Control as a Map Control at the given position.
          * @type {('top-left' | 'top-right' | 'bottom-left' | 'bottom-right')}
         */
        "myPositionControlPosition"?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
        /**
          * Ready event emitted when the MapsIndoors has been initialized and is ready.
          * @event ready
          * @type {EventEmitter}
         */
        "onMapsIndoorsReady"?: (event: MiMapMapboxCustomEvent<any>) => void;
        /**
          * Set or get the pitch (tilt) of the map. Measured in degrees (0-60).
          * @type {string}
         */
        "pitch"?: string;
        /**
          * Styling of polygon highlight when a location is clicked. Set it to null to turn off highlighting.
          * @type {object}
         */
        "polygonHighlightOptions"?: { strokeColor: string; strokeOpacity: number; strokeWeight: number; fillColor: string; fillOpacity: number; };
        /**
          * Styling of how the polyline looks when getting a route. Color: The stroke color of direction polyline on the map. Accepts any legal HTML color value. Default: '#307ad9'. Opacity: The stroke opacity of directions polylines on the map. Numerical value between 0.0 and 1.0. Default: 1. Weight: The width of the direction polyline in pixels. Default: 4.
          * @type {{ color: string, weight: number, opacity: number }}
         */
        "polylineOptions"?: { color: string, weight: number, opacity: number };
        /**
          * Set or get the current zoom level of the map.
          * @type {string}
         */
        "zoom"?: string;
    }
    interface MiMetricCard {
        /**
          * This can be used for displaying an error message if there are no data to be displayed.
          * @type {string}
          * @memberof MetricCard
         */
        "error"?: string;
        /**
          * This is the metric title.
          * @type {string}
          * @memberof MetricCard
         */
        "label"?: string;
        /**
          * When present a loading spinner will be displayed until the value or error attribute is set or the spinner attribute is removed
          * @type {boolean}
          * @memberof MetricCard
         */
        "spinner"?: boolean;
        /**
          * When present a info icon will be shown in the upper right corner of the card. When the mouse hovers over the icon tooltip will display the tip.
          * @type {string}
          * @memberof MetricCard
         */
        "tip"?: string;
        /**
          * This is the metric value.
          * @type {string}
          * @memberof MetricCard
         */
        "value"?: string;
    }
    interface MiMyPosition {
        /**
          * MapsIndoors instance.
         */
        "mapsindoors"?: any;
        /**
          * Reference: https://app.mapsindoors.com/mapsindoors/js/sdk/latest/docs/PositionControlOptions.html.
         */
        "myPositionOptions"?: any;
        "onPosition_error"?: (event: MiMyPositionCustomEvent<object>) => void;
        "onPosition_received"?: (event: MiMyPositionCustomEvent<object>) => void;
    }
    interface MiNotification {
        /**
          * Time the notification should be visible. Default value is 3.
          * @type {number} - Duration in seconds.
         */
        "duration"?: number;
        /**
          * Where the notifications should be positioned.
          * @type {NotificationPosition}
         */
        "position"?: NotificationPosition;
    }
    interface MiRouteInstructions {
        /**
          * Set active step to populate it with an "active" class. Defaults to legIndex 0 and stepIndex 0.
          * @type {{ legIndex: number, stepIndex: number }}
         */
        "activeStep"?: { legIndex: number, stepIndex: number };
        /**
          * If the end location is a MapsIndoors location, provide it to have the instructions present it. The destinationLocation attribute wins over the destinationName attribute.
          * @type {Location}
         */
        "destinationLocation"?: Location;
        /**
          * If the end location is a external location, provide a name to have the instructions present it. The destination name will not be rendered when the destinationLocation attribute is set.
          * @type {string}
         */
        "destinationName"?: string;
        /**
          * If indoor substeps/maneuvers should be hidden.
          * @type {boolean}
         */
        "hideIndoorSubsteps"?: boolean;
        /**
          * Event emitted when clicking on instructions.
          * @event clicked
          * @type {object}
          * @property {number} legIndex
          * @property {number} stepIndex
          * @property {number} maneuverIndex
         */
        "onClicked"?: (event: MiRouteInstructionsCustomEvent<object>) => void;
        /**
          * If the origin location is a MapsIndoors location, provide it to have the instructions present it. The originLocation attribute wins over the originName attribute.
          * @type {Location}
         */
        "originLocation"?: Location;
        /**
          * If the origin location is a external location, provide a name to have the instructions present it. The origin name will not be rendered when the originLocation attribute is set.
          * @type {string}
         */
        "originName"?: string;
        /**
          * A MapsIndoors directions result object given from a getRoute call from DirectionsService.
          * @type {Route}
         */
        "route"?: Route;
        /**
          * Translations object for translatable labels.
         */
        "translations"?: DirectionsTranslations;
        /**
          * Set preferred travel mode. Defaults to "walking".
          * @type {RouteTravelMode} 'walking', 'bicycling', 'transit', 'driving'.
         */
        "travelMode"?: RouteTravelMode;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit"?: UnitSystem;
    }
    interface MiRouteInstructionsHeading {
        /**
          * The destination location name.
          * @type {string}
         */
        "destinationName"?: string;
        /**
          * The origin location name.
          * @type {string}
         */
        "originName"?: string;
        /**
          * The total travel duration in seconds.
          * @type {number}
         */
        "totalTravelTime"?: number;
        /**
          * The total walking distance in meters.
          * @type {number}
         */
        "totalWalkingDistance"?: number;
        "translations"?: { from: string; to: string; avoidStairs: string; walk: string; walking: string; bike: string; bicycling: string; transit: string; car: string; driving: string; };
        /**
          * Set preferred travel mode. Defaults to "walking".
          * @type {RouteTravelMode} 'walking', 'bicycling', 'transit', 'driving'.
         */
        "travelMode"?: RouteTravelMode;
        /**
          * Set 'imperial' or 'metric' as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit"?: UnitSystem;
    }
    interface MiRouteInstructionsManeuver {
        /**
          * Maneuver to display given as stringified JSON.
          * @type {string} - Maneuver/substep object passed as stringified JSON.
         */
        "maneuver"?: string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations"?: string;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit"?: UnitSystem;
    }
    interface MiRouteInstructionsManeuverLegacy {
        /**
          * Maneuver to display given as stringified JSON.
          * @type {string} - Maneuver/substep object passed as stringified JSON.
         */
        "maneuver"?: string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations"?: string;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit"?: UnitSystem;
    }
    interface MiRouteInstructionsStep {
        /**
          * The final step when the user has arrived to the destination location.
          * @type {string}
         */
        "destinationLocation"?: string;
        /**
          * The route context of previous step, if any.
          * @type {string}
         */
        "fromRouteContext"?: string;
        /**
          * The transit stop of previous step if any.
          * @type {string}
         */
        "fromTransitStop"?: string;
        /**
          * The travel mode of previous step, if any.
          * @type {string}
         */
        "fromTravelMode"?: string;
        /**
          * If indoor substeps/maneuvers should be hidden.
          * @type {boolean}
         */
        "hideIndoorSubsteps"?: boolean;
        /**
          * Event emitted when clicking on a step (not sub step).
          * @event stepClicked
          * @type {object}
          * @properties Object
         */
        "onStepClicked"?: (event: MiRouteInstructionsStepCustomEvent<object>) => void;
        /**
          * Event emitted when substeps are toggled.
         */
        "onSubstepsToggled"?: (event: MiRouteInstructionsStepCustomEvent<void>) => void;
        /**
          * The step data object to render from. Must be passed as stringified JSON.
         */
        "step"?: string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations"?: string;
        /**
          * Set imperial or metric as default unit system. Default is Metric unless the browser is running US English. In that case Imperial.
          * @type {UnitSystem}
         */
        "unit"?: UnitSystem;
    }
    interface MiRouteInstructionsStepLegacy {
        /**
          * The route context of previous step, if any.
          * @type {string}
         */
        "fromRouteContext"?: string;
        /**
          * The transit stop of previous step if any.
          * @type {string}
         */
        "fromTransitStop"?: string;
        /**
          * The travel mode of previous step, if any.
          * @type {string}
         */
        "fromTravelMode"?: string;
        /**
          * If indoor substeps/maneuvers should be hidden.
          * @type {boolean}
         */
        "hideIndoorSubsteps"?: boolean;
        /**
          * Event emitted when clicking on a step (not sub step).
          * @event stepClicked
          * @type {object}
          * @properties Object
         */
        "onStepClicked"?: (event: MiRouteInstructionsStepLegacyCustomEvent<object>) => void;
        /**
          * The step data object to render from. Must be passed as stringified JSON.
         */
        "step"?: string;
        /**
          * Object with translation strings as stringified JSON.
         */
        "translations"?: string;
        /**
          * Set imperial or metric as default unit system.
          * @type {UnitSystem} 'imperial' or 'metric'
         */
        "unit"?: UnitSystem;
    }
    interface MiScrollButtons {
        /**
          * Reference to the element with scroll on parent element.
          * @type {HTMLDivElement}
         */
        "scrollContainerElementRef"?: HTMLDivElement;
        /**
          * Determines how far to scroll when clicking one of the buttons. Default value is 100.
          * @type {number}
         */
        "scrollLength"?: number;
    }
    interface MiSearch {
        /**
          * Data attributes for the input field.
         */
        "dataAttributes"?: { [key: string]: string };
        /**
          * Make the search field disabled
         */
        "disabled"?: boolean;
        /**
          * Restrict Google Places search to a specific country (two-character, ISO 3166-1 Alpha-2 compatible country code)
         */
        "gmCountryCode"?: string;
        /**
          * If searching should include Google Places autocomplete suggestions.  Remember to comply to Google's policy by showing a "Power By Google" badge somewhere on your page if not already showing a Google map: https://developers.google.com/places/web-service/policies
         */
        "google"?: boolean;
        /**
          * Id for the input field.
         */
        "idAttribute"?: string;
        /**
          * If searching should include Mapbox autocomplete suggestions.
         */
        "mapbox"?: boolean;
        /**
          * If searching should include MapsIndoors locations.
         */
        "mapsindoors"?: boolean;
        /**
          * Search only Mapsindoors locations within given categories. Accepts comma separated list of categories, eg. 'toilet,office'
         */
        "miCategories"?: string;
        /**
          * Which fields on MapsIndoors locations to search in. Comma separated string.
         */
        "miFields"?: string;
        /**
          * Search for MapsIndoors locations near a point. Can either be lat,lng coordinate as a string, eg. '-12.3456,45.6789' or a string in the format "type:id" e.g. "venue:586ca9f1bc1f5702406442b6"
         */
        "miNear"?: string;
        /**
          * Specify Mapsindoors search ordering
         */
        "miOrder"?: string;
        /**
          * Tell Mapsindoors to skip a number of results. Combine with miTake for pagination purposes.
         */
        "miSkip"?: number;
        /**
          * Restrict how many Mapsindoors results to request.
         */
        "miTake"?: number;
        /**
          * Restrict search results to a speficic venue (id or name)
         */
        "miVenue"?: string;
        /**
          * Event emitted whenever the value of the input field has changed.
         */
        "onChanged"?: (event: MiSearchCustomEvent<void>) => void;
        /**
          * Event emitted when the search field is emptied.
         */
        "onCleared"?: (event: MiSearchCustomEvent<void>) => void;
        /**
          * Event emitted after every component rendering.
         */
        "onComponentRendered"?: (event: MiSearchCustomEvent<void>) => void;
        /**
          * Event emitted when searching is complete.
         */
        "onResults"?: (event: MiSearchCustomEvent<object[]>) => void;
        /**
          * Event emitted whenever the search field contains only one character.
         */
        "onShortInput"?: (event: MiSearchCustomEvent<void>) => void;
        /**
          * Placeholder for the input field.
         */
        "placeholder"?: string;
        /**
          * The Mapbox Session Token used for getting Mapbox autocomplete suggestions.
         */
        "sessionToken"?: string;
        /**
          * The user position which can determine the proximity for the Mapbox places results.
         */
        "userPosition"?: string;
        /**
          * Get or set the entered value
         */
        "value"?: string;
    }
    interface MiShareSms {
        /**
          * Default value for country code input field.
          * @type {string}
         */
        "countryCode"?: string;
        /**
          * MapsIndoors id for destination location.
          * @type {string}
         */
        "destinationLocationId"?: string;
        /**
          * Emits a success event when the SMS is send.
          * @type {EventEmitter}
         */
        "onSuccessfullySent"?: (event: MiShareSmsCustomEvent<any>) => void;
        /**
          * Emits a error message when the SMS wasn't send.
          * @type {EventEmitter<string>}
         */
        "onUnsuccessfullySent"?: (event: MiShareSmsCustomEvent<string>) => void;
        /**
          * MapsIndoors id for origin location.
          * @type {string}
         */
        "originLocationId"?: string;
        /**
          * Placeholder text for phone number input field.
          * @type {string}
         */
        "phoneNumberInputPlaceholder"?: string;
        /**
          * Label for submit button.
          * @type {string}
         */
        "submitButtonLabel"?: string;
        /**
          * MapsIndoors venue id.
          * @type {string}
         */
        "venueId"?: string;
    }
    interface MiSpinner {
        /**
          * The inverse attribute will inverse the color of the spinner.
          * @type {boolean}
         */
        "inverse"?: boolean;
    }
    interface MiStepSwitcher {
        /**
          * Heading to display.
          * @type {string}
         */
        "heading"?: string;
        /**
          * Emits the new step index as a number.
          * @type {EventEmitter}
         */
        "onStepIndexChanged"?: (event: MiStepSwitcherCustomEvent<number>) => void;
        /**
          * Step index to show. Defaults to first step.
          * @type {number}
         */
        "stepIndex"?: number;
        /**
          * Steps to display dots for.
          * @type {any[]}
         */
        "steps"?: any[];
    }
    interface MiTab {
        "label"?: string;
        "tabFor"?: string;
    }
    interface MiTabPanel {
    }
    interface MiTabs {
        "active"?: number;
        /**
          * Sets a border surrounding the content view.
         */
        "bordered"?: boolean;
    }
    interface MiTime {
        /**
          * Time in seconds.
          * @type {string}
         */
        "seconds"?: number;
        /**
          * Object with translation strings as stringified JSON. Default translations {days: 'd', hours: 'h', minutes: 'min'}.
         */
        "translations"?: string;
    }
    interface IntrinsicElements {
        "combo-box-item": ComboBoxItem;
        "mi-card": MiCard;
        "mi-chip": MiChip;
        "mi-column": MiColumn;
        "mi-combo-box": MiComboBox;
        "mi-data-table": MiDataTable;
        "mi-distance": MiDistance;
        "mi-dropdown": MiDropdown;
        "mi-dropdown-item": MiDropdownItem;
        "mi-floor-selector": MiFloorSelector;
        "mi-icon": MiIcon;
        "mi-keyboard": MiKeyboard;
        "mi-list": MiList;
        "mi-list-item-category": MiListItemCategory;
        "mi-list-item-location": MiListItemLocation;
        "mi-location-booking": MiLocationBooking;
        "mi-location-info": MiLocationInfo;
        "mi-map-googlemaps": MiMapGooglemaps;
        "mi-map-mapbox": MiMapMapbox;
        "mi-metric-card": MiMetricCard;
        "mi-my-position": MiMyPosition;
        "mi-notification": MiNotification;
        "mi-route-instructions": MiRouteInstructions;
        "mi-route-instructions-heading": MiRouteInstructionsHeading;
        "mi-route-instructions-maneuver": MiRouteInstructionsManeuver;
        "mi-route-instructions-maneuver-legacy": MiRouteInstructionsManeuverLegacy;
        "mi-route-instructions-step": MiRouteInstructionsStep;
        "mi-route-instructions-step-legacy": MiRouteInstructionsStepLegacy;
        "mi-scroll-buttons": MiScrollButtons;
        "mi-search": MiSearch;
        "mi-share-sms": MiShareSms;
        "mi-spinner": MiSpinner;
        "mi-step-switcher": MiStepSwitcher;
        "mi-tab": MiTab;
        "mi-tab-panel": MiTabPanel;
        "mi-tabs": MiTabs;
        "mi-time": MiTime;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "combo-box-item": LocalJSX.ComboBoxItem & JSXBase.HTMLAttributes<HTMLComboBoxItemElement>;
            "mi-card": LocalJSX.MiCard & JSXBase.HTMLAttributes<HTMLMiCardElement>;
            "mi-chip": LocalJSX.MiChip & JSXBase.HTMLAttributes<HTMLMiChipElement>;
            "mi-column": LocalJSX.MiColumn & JSXBase.HTMLAttributes<HTMLMiColumnElement>;
            "mi-combo-box": LocalJSX.MiComboBox & JSXBase.HTMLAttributes<HTMLMiComboBoxElement>;
            "mi-data-table": LocalJSX.MiDataTable & JSXBase.HTMLAttributes<HTMLMiDataTableElement>;
            "mi-distance": LocalJSX.MiDistance & JSXBase.HTMLAttributes<HTMLMiDistanceElement>;
            "mi-dropdown": LocalJSX.MiDropdown & JSXBase.HTMLAttributes<HTMLMiDropdownElement>;
            "mi-dropdown-item": LocalJSX.MiDropdownItem & JSXBase.HTMLAttributes<HTMLMiDropdownItemElement>;
            "mi-floor-selector": LocalJSX.MiFloorSelector & JSXBase.HTMLAttributes<HTMLMiFloorSelectorElement>;
            "mi-icon": LocalJSX.MiIcon & JSXBase.HTMLAttributes<HTMLMiIconElement>;
            "mi-keyboard": LocalJSX.MiKeyboard & JSXBase.HTMLAttributes<HTMLMiKeyboardElement>;
            "mi-list": LocalJSX.MiList & JSXBase.HTMLAttributes<HTMLMiListElement>;
            "mi-list-item-category": LocalJSX.MiListItemCategory & JSXBase.HTMLAttributes<HTMLMiListItemCategoryElement>;
            "mi-list-item-location": LocalJSX.MiListItemLocation & JSXBase.HTMLAttributes<HTMLMiListItemLocationElement>;
            "mi-location-booking": LocalJSX.MiLocationBooking & JSXBase.HTMLAttributes<HTMLMiLocationBookingElement>;
            "mi-location-info": LocalJSX.MiLocationInfo & JSXBase.HTMLAttributes<HTMLMiLocationInfoElement>;
            "mi-map-googlemaps": LocalJSX.MiMapGooglemaps & JSXBase.HTMLAttributes<HTMLMiMapGooglemapsElement>;
            "mi-map-mapbox": LocalJSX.MiMapMapbox & JSXBase.HTMLAttributes<HTMLMiMapMapboxElement>;
            "mi-metric-card": LocalJSX.MiMetricCard & JSXBase.HTMLAttributes<HTMLMiMetricCardElement>;
            "mi-my-position": LocalJSX.MiMyPosition & JSXBase.HTMLAttributes<HTMLMiMyPositionElement>;
            "mi-notification": LocalJSX.MiNotification & JSXBase.HTMLAttributes<HTMLMiNotificationElement>;
            "mi-route-instructions": LocalJSX.MiRouteInstructions & JSXBase.HTMLAttributes<HTMLMiRouteInstructionsElement>;
            "mi-route-instructions-heading": LocalJSX.MiRouteInstructionsHeading & JSXBase.HTMLAttributes<HTMLMiRouteInstructionsHeadingElement>;
            "mi-route-instructions-maneuver": LocalJSX.MiRouteInstructionsManeuver & JSXBase.HTMLAttributes<HTMLMiRouteInstructionsManeuverElement>;
            "mi-route-instructions-maneuver-legacy": LocalJSX.MiRouteInstructionsManeuverLegacy & JSXBase.HTMLAttributes<HTMLMiRouteInstructionsManeuverLegacyElement>;
            "mi-route-instructions-step": LocalJSX.MiRouteInstructionsStep & JSXBase.HTMLAttributes<HTMLMiRouteInstructionsStepElement>;
            "mi-route-instructions-step-legacy": LocalJSX.MiRouteInstructionsStepLegacy & JSXBase.HTMLAttributes<HTMLMiRouteInstructionsStepLegacyElement>;
            "mi-scroll-buttons": LocalJSX.MiScrollButtons & JSXBase.HTMLAttributes<HTMLMiScrollButtonsElement>;
            "mi-search": LocalJSX.MiSearch & JSXBase.HTMLAttributes<HTMLMiSearchElement>;
            "mi-share-sms": LocalJSX.MiShareSms & JSXBase.HTMLAttributes<HTMLMiShareSmsElement>;
            "mi-spinner": LocalJSX.MiSpinner & JSXBase.HTMLAttributes<HTMLMiSpinnerElement>;
            "mi-step-switcher": LocalJSX.MiStepSwitcher & JSXBase.HTMLAttributes<HTMLMiStepSwitcherElement>;
            "mi-tab": LocalJSX.MiTab & JSXBase.HTMLAttributes<HTMLMiTabElement>;
            "mi-tab-panel": LocalJSX.MiTabPanel & JSXBase.HTMLAttributes<HTMLMiTabPanelElement>;
            "mi-tabs": LocalJSX.MiTabs & JSXBase.HTMLAttributes<HTMLMiTabsElement>;
            "mi-time": LocalJSX.MiTime & JSXBase.HTMLAttributes<HTMLMiTimeElement>;
        }
    }
}
