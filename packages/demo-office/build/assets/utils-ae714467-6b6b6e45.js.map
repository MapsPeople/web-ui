{"version":3,"file":"utils-ae714467-6b6b6e45.js","sources":["../../../components/dist/esm/utils-ae714467.js"],"sourcesContent":["function isNumber(str) {\n  return str !== null && str > '' && !isNaN(Number(str));\n}\nfunction formatNumber(n) {\n  return Number(n).toLocaleString(undefined, { minimumFractionDigits: 0 });\n}\nfunction isNullOrUndefined(input) {\n  return (input === null || input === undefined);\n}\n/**\n * Check if current browser is Internet Explorer.\n *\n * @export\n * @returns {boolean}\n */\nfunction isInternetExplorer() {\n  return (navigator.userAgent.match(/Trident/g) || navigator.userAgent.match(/MSIE/g)) ? true : false;\n}\n/**\n * Check if string is a valid URL.\n * @param {string} urlString\n * @returns {boolean}\n */\nfunction isUrlValid(urlString) {\n  try {\n    new URL(urlString);\n    return true;\n  }\n  catch (err) {\n    return false;\n  }\n}\n/**\n * Append query parameters to image URL hosted by MapsIndoors to request with specific size or scale depending on hostname.\n * @param {string} imageURL - URL for image\n * @param {number} iconDisplaySize - The width and height that the icon should be displayed in\n * @returns string\n */\nfunction appendMapsIndoorsImageQueryParameters(imageURL, iconDisplaySize) {\n  if (isUrlValid(imageURL) === false) {\n    return;\n  }\n  const url = new URL(imageURL);\n  const hostname = url.hostname;\n  if (hostname === 'image.mapsindoors.com') {\n    // Add query parameters for image size and fitMode.\n    const devicePixelRatio = Math.max(2, window.devicePixelRatio || 1); // Forced minimum of 2 to circumvent poor scaling quality delivered from the image API (see MIBAPI-2566)\n    const imageRequestWidth = iconDisplaySize * devicePixelRatio;\n    const imageRequestHeight = iconDisplaySize * devicePixelRatio;\n    url.searchParams.set('width', imageRequestWidth.toString());\n    url.searchParams.set('height', imageRequestHeight.toString());\n    url.searchParams.set('fitMode', 'cover');\n  }\n  if (['app.mapsindoors.com', 'v2.mapsindoors.com'].includes(hostname)) {\n    // For legacy images, add a scale parameter\n    url.searchParams.set('scale', '2');\n  }\n  return url.toString();\n}\n\nexport { isNumber as a, appendMapsIndoorsImageQueryParameters as b, isInternetExplorer as c, formatNumber as f, isNullOrUndefined as i };\n"],"names":["isNumber","str","formatNumber","n","isNullOrUndefined","input","isInternetExplorer","isUrlValid","urlString","appendMapsIndoorsImageQueryParameters","imageURL","iconDisplaySize","url","hostname","devicePixelRatio","imageRequestWidth","imageRequestHeight"],"mappings":"AAAA,SAASA,EAASC,EAAK,CACrB,OAAOA,IAAQ,MAAQA,EAAM,IAAM,CAAC,MAAM,OAAOA,CAAG,CAAC,CACvD,CACA,SAASC,EAAaC,EAAG,CACvB,OAAO,OAAOA,CAAC,EAAE,eAAe,OAAW,CAAE,sBAAuB,CAAC,CAAE,CACzE,CACA,SAASC,EAAkBC,EAAO,CAChC,OAAQA,GAAU,IACpB,CAOA,SAASC,GAAqB,CAC5B,MAAQ,aAAU,UAAU,MAAM,UAAU,GAAK,UAAU,UAAU,MAAM,OAAO,EACpF,CAMA,SAASC,EAAWC,EAAW,CAC7B,GAAI,CACF,WAAI,IAAIA,CAAS,EACV,EACR,MACD,CACE,MAAO,EACR,CACH,CAOA,SAASC,EAAsCC,EAAUC,EAAiB,CACxE,GAAIJ,EAAWG,CAAQ,IAAM,GAC3B,OAEF,MAAME,EAAM,IAAI,IAAIF,CAAQ,EACtBG,EAAWD,EAAI,SACrB,GAAIC,IAAa,wBAAyB,CAExC,MAAMC,EAAmB,KAAK,IAAI,EAAG,OAAO,kBAAoB,CAAC,EAC3DC,EAAoBJ,EAAkBG,EACtCE,EAAqBL,EAAkBG,EAC7CF,EAAI,aAAa,IAAI,QAASG,EAAkB,SAAQ,CAAE,EAC1DH,EAAI,aAAa,IAAI,SAAUI,EAAmB,SAAQ,CAAE,EAC5DJ,EAAI,aAAa,IAAI,UAAW,OAAO,EAEzC,MAAI,CAAC,sBAAuB,oBAAoB,EAAE,SAASC,CAAQ,GAEjED,EAAI,aAAa,IAAI,QAAS,GAAG,EAE5BA,EAAI,UACb"}