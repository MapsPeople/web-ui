{"version":3,"file":"mi-list.entry-52d5dae2.js","sources":["../../../components/dist/esm/mi-list.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-7e9696f3.js';\n\nconst listCss = \"html{box-sizing:border-box}*,*:before,*:after{box-sizing:inherit}:host{display:block;height:100%;width:100%}.container{height:100%;display:flex}.container .scroll-container{width:100%;overflow-y:auto}\";\n\nconst List = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scrollButtonsEnabled = false;\n    this.scrollLength = 100;\n  }\n  componentDidLoad() {\n    this.addIntersectionObserver();\n    if (this.scrollButtonsEnabled) {\n      this.setScrollContainerElementRef();\n    }\n  }\n  /**\n   * @description Update state of scroll buttons when a \"listItemDidRender\" event is fired.\n   * @private\n   */\n  updateScrollButtonsState() {\n    if (this.scrollButtonsEnabled && this.miScrollButtonsElement.scrollContainerElementRef) {\n      this.miScrollButtonsElement.updateScrollButtonsState();\n    }\n  }\n  /**\n   * @description Set scrollContainerElementRef attribute on miScrollButtonsElement.\n   * @private\n   */\n  setScrollContainerElementRef() {\n    this.miScrollButtonsElement.scrollContainerElementRef = this.scrollContainerElement;\n  }\n  /**\n   * @description Add intersection observer and update scroll buttons state on intersection â€“ workaround to avoid the element not having any dimensions before it's shown.\n   * @private\n   */\n  addIntersectionObserver() {\n    this.intersectionObserver = new IntersectionObserver((entries) => {\n      if (entries[0].intersectionRatio <= 0) {\n        return;\n      }\n      // Disable scroll buttons if container element doesn't have scroll\n      if (this.scrollContainerElement.scrollHeight - this.scrollContainerElement.scrollTop === this.scrollContainerElement.clientHeight) {\n        this.updateScrollButtonsState();\n      }\n      this.intersectionObserver.disconnect();\n    });\n    this.intersectionObserver.observe(this.scrollContainerElement);\n  }\n  render() {\n    return (h(\"div\", { class: \"container\" }, h(\"div\", { role: \"list\", class: \"scroll-container\", ref: (el) => this.scrollContainerElement = el }, h(\"slot\", null)), this.scrollButtonsEnabled ? h(\"mi-scroll-buttons\", { scrollLength: this.scrollLength, ref: (el) => this.miScrollButtonsElement = el }) : null));\n  }\n};\nList.style = listCss;\n\nexport { List as mi_list };\n"],"names":["listCss","List","hostRef","registerInstance","entries","h","el"],"mappings":"+CAEA,MAAMA,EAAU,2MAEVC,EAAO,KAAM,CACjB,YAAYC,EAAS,CACnBC,EAAiB,KAAMD,CAAO,EAC9B,KAAK,qBAAuB,GAC5B,KAAK,aAAe,GACrB,CACD,kBAAmB,CACjB,KAAK,wBAAuB,EACxB,KAAK,sBACP,KAAK,6BAA4B,CAEpC,CAKD,0BAA2B,CACrB,KAAK,sBAAwB,KAAK,uBAAuB,2BAC3D,KAAK,uBAAuB,0BAE/B,CAKD,8BAA+B,CAC7B,KAAK,uBAAuB,0BAA4B,KAAK,sBAC9D,CAKD,yBAA0B,CACxB,KAAK,qBAAuB,IAAI,qBAAsBE,GAAY,CAC5DA,EAAQ,CAAC,EAAE,mBAAqB,IAIhC,KAAK,uBAAuB,aAAe,KAAK,uBAAuB,YAAc,KAAK,uBAAuB,cACnH,KAAK,yBAAwB,EAE/B,KAAK,qBAAqB,aAChC,CAAK,EACD,KAAK,qBAAqB,QAAQ,KAAK,sBAAsB,CAC9D,CACD,QAAS,CACP,OAAQC,EAAE,MAAO,CAAE,MAAO,aAAeA,EAAE,MAAO,CAAE,KAAM,OAAQ,MAAO,mBAAoB,IAAMC,GAAO,KAAK,uBAAyBA,GAAMD,EAAE,OAAQ,IAAI,CAAC,EAAG,KAAK,qBAAuBA,EAAE,oBAAqB,CAAE,aAAc,KAAK,aAAc,IAAMC,GAAO,KAAK,uBAAyBA,CAAI,CAAA,EAAI,IAAI,CAC9S,CACH,EACAL,EAAK,MAAQD"}